# -*- coding: utf-8 -*-
"""NLP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C87MAJGroCF2u2d6twe2zgncH9UgNS6l
"""

import numpy as np
import pandas as pd

# FUNCTIONS
def json_to_df(address):
    df=pd.read_json(address,orient="index")
    df["ID"]=np.arange(0,len(df))
    df["Log"]=df.index
    df.index=np.arange(0,len(df))
    df["Label"]=df[0]
    df=df.drop(0,axis=1)
    return df

def split_num(df):
    split=df["Log"].str.split(pat="2005.",expand=True)
    split[0]=split[0].astype(int)
    df1=pd.DataFrame({"LOG":split[0],"Label":df["Label"]})
    return df1

def split_node_test(df):
    split=df[" Log"].str.split(pat="2005.",expand=True)
    split2=split[1].str.split(pat="[\:\-\ ]",expand=True)
    useful=split2[[1,2,3,4,5,6]]
    return useful

def split_node_train(df):
    split=df["Log"].str.split(pat="2005.",expand=True)
    split2=split[1].str.split(pat="[\:\-\ ]",expand=True)
    useful=split2[[1,2,3,4,5,6]]
    return useful

def split_RAS_test(df):
    split=df[" Log"].str.split(pat="2005.",expand=True)
    split2=split[2].str.split(pat="-U",expand=True)
    split3=split2[1].str.split(pat=" ",expand=True)
    useful=split3[[1,2,3]]
    #dum=pd.get_dummies(useful)
    return useful

def split_RAS_train(df):
    split=df["Log"].str.split(pat="2005.",expand=True)
    split2=split[2].str.split(pat="-U",expand=True)
    split3=split2[1].str.split(pat=" ",expand=True)
    useful=split3[[1,2,3]]
    #dum=pd.get_dummies(useful)
    return useful

def undersampler(df):
    x=df.drop("Label",axis=1)
    y=df["Label"]
    from imblearn.under_sampling import RandomUnderSampler
    rus = RandomUnderSampler()
    xunder, yunder = rus.fit_resample(x, y)
    return xunder,yunder


def oversampler(df):
  x=df.drop("Label",axis=1)
  y=df["Label"]
  from imblearn.over_sampling import RandomOverSampler
  ros = RandomOverSampler()
  xros, yros = ros.fit_resample(x, y)
  return xros,yros

def rfc(x,y):
    '''
    RETURNS CLASSIFICATION MODEL AND ITS SCORE ON VALIDATION SET ALONG WITH VALIDATION SET
    '''
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.model_selection import train_test_split
    xtrain,xval,ytrain,yval=train_test_split(x,y,test_size=0.3)
    clf=RandomForestClassifier()
    clf.fit(xtrain,ytrain)
    
    return clf,clf.score(xval,yval)

def converter(df):
    choice=input("ENTER CHOICE : \n 1 FOR STRING TO NUM\n 2 FOR NUM TO STRING \n")
    if choice== "1":
        df["Label"]=df["Label"].str.replace("normal","0")
        df["Label"]=df["Label"].str.replace("ab0","1")
        df["Label"]=df["Label"].astype(int)
        return df
    elif choice =="2":
        df["Label"]=df["Label"].astype(str)
        df["Label"]=df["Label"].str.replace("0","normal")
        df["Label"]=df["Label"].str.replace("1","abnormal")
        return df
    else :
        print("WRONG CHOICE ")

def ypreds_to_df(ypreds):
    df=pd.DataFrame({"ID":np.arange(0,len(ypreds))," Label":ypreds})
    df.set_index("ID",inplace=True)
    df[" Label"]=df[" Label"].astype(str)
    df[" Label"]=df[" Label"].str.replace("0","normal")
    df[" Label"]=df[" Label"].str.replace("1","abnormal")
    return df

address="/content/drive/MyDrive/Convolve/New data/train.json"
data=json_to_df(address)
data

data2=data.sample(frac=1)
data2

data2.Log[0]

split=data2["Log"].str.split(pat="RAS",expand=True)
split

df=pd.DataFrame({"INFO":split[1]})
df

df["INFO"]=df["INFO"].astype(str)

from sklearn.feature_extraction import text
count_vect=text.CountVectorizer()
train_vectors=count_vect.fit_transform(df["INFO"])

train_vectors

test=pd.read_csv("/content/drive/MyDrive/Convolve/New data/test.csv")
test

split2=test[" Log"].str.split(pat="RAS",expand=True)
df2=pd.DataFrame({"INFO":split2[1]})
df2

#df["Label"]=data2["Label"]
df=converter(df)
xunder,yunder=undersampler(df)

df

train_vectors=count_vect.transform(df["INFO"])

xunder

under_vectors=count_vect.fit_transform(xunder["INFO"])

df2["INFO"]=df2["INFO"].astype(str)

test_vectors=count_vect.transform(df2["INFO"])

test_vectors

under_vectors

xunder

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split,cross_val_score

xtrain,xval,ytrain,yval = train_test_split(xunder,yunder,test_size=0.2)
train_vector=count_vect.fit_transform(xtrain["INFO"])
val_vector=count_vect.transform(xval["INFO"])

model=RandomForestClassifier()
model.fit(train_vector,ytrain)
model.score(val_vector,yval)

under_vectors

test_vec=count_vect.transform(df2["INFO"])

cross_val_score(model,under_vectors,yunder,cv=5)

cross_val_score(model,train_vectors,df["Label"],cv=5)

test_vec=count_vect.transform(df2["INFO"])
yp=model.predict(test_vec)

pred=ypreds_to_df(yp)
pred

pred[" Label"].value_counts()

